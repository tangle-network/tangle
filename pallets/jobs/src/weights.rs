
//! Autogenerated weights for `pallet_jobs`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-04-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Salmans-Laptop.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("benchmark")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/tangle
// benchmark
// pallet
// --chain
// benchmark
// --pallet=pallet-jobs
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output=./pallets/jobs/src/weights.rs
// --template=./.maintain/frame-weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_jobs`.
pub trait WeightInfo {
	fn submit_job() -> Weight;
	fn submit_job_result() -> Weight;
	fn withdraw_rewards() -> Weight;
	fn report_inactive_validator() -> Weight;
	fn set_permitted_caller() -> Weight;
	fn set_time_fee() -> Weight;
	fn extend_job_result_ttl() -> Weight;
}

/// Weights for `pallet_jobs` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Jobs::NextJobId` (r:1 w:1)
	/// Proof: `Jobs::NextJobId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::ValidatorJobIdLookup` (r:1 w:1)
	/// Proof: `Jobs::ValidatorJobIdLookup` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
	/// Storage: `Dkg::FeeInfo` (r:1 w:0)
	/// Proof: `Dkg::FeeInfo` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::TimeFeePerBlock` (r:1 w:0)
	/// Proof: `Jobs::TimeFeePerBlock` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::SubmittedJobsRole` (r:0 w:1)
	/// Proof: `Jobs::SubmittedJobsRole` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::SubmittedJobs` (r:0 w:1)
	/// Proof: `Jobs::SubmittedJobs` (`max_values`: None, `max_size`: Some(5587), added: 8062, mode: `MaxEncodedLen`)
	fn submit_job() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256`
		//  Estimated: `4507`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(19_000_000, 4507)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Jobs::SubmittedJobs` (r:1 w:1)
	/// Proof: `Jobs::SubmittedJobs` (`max_values`: None, `max_size`: Some(5587), added: 8062, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::ValidatorRewards` (r:2 w:2)
	/// Proof: `Jobs::ValidatorRewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::SubmittedJobsRole` (r:0 w:1)
	/// Proof: `Jobs::SubmittedJobsRole` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::KnownResults` (r:0 w:1)
	/// Proof: `Jobs::KnownResults` (`max_values`: None, `max_size`: Some(11050), added: 13525, mode: `MaxEncodedLen`)
	fn submit_job_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `9052`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(26_000_000, 9052)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Jobs::ValidatorRewards` (r:1 w:1)
	/// Proof: `Jobs::ValidatorRewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `519`
		//  Estimated: `6196`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 6196)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Jobs::SubmittedJobs` (r:1 w:1)
	/// Proof: `Jobs::SubmittedJobs` (`max_values`: None, `max_size`: Some(5587), added: 8062, mode: `MaxEncodedLen`)
	fn report_inactive_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `9052`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 9052)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Jobs::KnownResults` (r:1 w:1)
	/// Proof: `Jobs::KnownResults` (`max_values`: None, `max_size`: Some(11050), added: 13525, mode: `MaxEncodedLen`)
	fn set_permitted_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424`
		//  Estimated: `14515`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 14515)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Jobs::TimeFeePerBlock` (r:0 w:1)
	/// Proof: `Jobs::TimeFeePerBlock` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_time_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Jobs::KnownResults` (r:1 w:1)
	/// Proof: `Jobs::KnownResults` (`max_values`: None, `max_size`: Some(11050), added: 13525, mode: `MaxEncodedLen`)
	/// Storage: `Dkg::FeeInfo` (r:1 w:0)
	/// Proof: `Dkg::FeeInfo` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn extend_job_result_ttl() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `598`
		//  Estimated: `14515`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 14515)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Jobs::NextJobId` (r:1 w:1)
	/// Proof: `Jobs::NextJobId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::ValidatorJobIdLookup` (r:1 w:1)
	/// Proof: `Jobs::ValidatorJobIdLookup` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
	/// Storage: `Dkg::FeeInfo` (r:1 w:0)
	/// Proof: `Dkg::FeeInfo` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::TimeFeePerBlock` (r:1 w:0)
	/// Proof: `Jobs::TimeFeePerBlock` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::SubmittedJobsRole` (r:0 w:1)
	/// Proof: `Jobs::SubmittedJobsRole` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::SubmittedJobs` (r:0 w:1)
	/// Proof: `Jobs::SubmittedJobs` (`max_values`: None, `max_size`: Some(5587), added: 8062, mode: `MaxEncodedLen`)
	fn submit_job() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `256`
		//  Estimated: `4507`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(19_000_000, 4507)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Jobs::SubmittedJobs` (r:1 w:1)
	/// Proof: `Jobs::SubmittedJobs` (`max_values`: None, `max_size`: Some(5587), added: 8062, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::ValidatorRewards` (r:2 w:2)
	/// Proof: `Jobs::ValidatorRewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::SubmittedJobsRole` (r:0 w:1)
	/// Proof: `Jobs::SubmittedJobsRole` (`max_values`: None, `max_size`: Some(18), added: 2493, mode: `MaxEncodedLen`)
	/// Storage: `Jobs::KnownResults` (r:0 w:1)
	/// Proof: `Jobs::KnownResults` (`max_values`: None, `max_size`: Some(11050), added: 13525, mode: `MaxEncodedLen`)
	fn submit_job_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `471`
		//  Estimated: `9052`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(26_000_000, 9052)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Jobs::ValidatorRewards` (r:1 w:1)
	/// Proof: `Jobs::ValidatorRewards` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `519`
		//  Estimated: `6196`
		// Minimum execution time: 41_000_000 picoseconds.
		Weight::from_parts(42_000_000, 6196)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Jobs::SubmittedJobs` (r:1 w:1)
	/// Proof: `Jobs::SubmittedJobs` (`max_values`: None, `max_size`: Some(5587), added: 8062, mode: `MaxEncodedLen`)
	fn report_inactive_validator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `9052`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(13_000_000, 9052)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Jobs::KnownResults` (r:1 w:1)
	/// Proof: `Jobs::KnownResults` (`max_values`: None, `max_size`: Some(11050), added: 13525, mode: `MaxEncodedLen`)
	fn set_permitted_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `424`
		//  Estimated: `14515`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_000_000, 14515)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Jobs::TimeFeePerBlock` (r:0 w:1)
	/// Proof: `Jobs::TimeFeePerBlock` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_time_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_000_000 picoseconds.
		Weight::from_parts(2_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Jobs::KnownResults` (r:1 w:1)
	/// Proof: `Jobs::KnownResults` (`max_values`: None, `max_size`: Some(11050), added: 13525, mode: `MaxEncodedLen`)
	/// Storage: `Dkg::FeeInfo` (r:1 w:0)
	/// Proof: `Dkg::FeeInfo` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn extend_job_result_ttl() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `598`
		//  Estimated: `14515`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 14515)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
