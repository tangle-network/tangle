
//! Autogenerated weights for pallet_roles
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/tangle
// benchmark
// pallet
// --chain
// dev
// --pallet=pallet-roles
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output=./pallets/roles/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_roles.
pub trait WeightInfo {
	fn create_profile() -> Weight;
	fn update_profile() -> Weight;
	fn delete_profile() -> Weight;
	fn chill() -> Weight;
	fn unbound_funds() -> Weight;
	fn withdraw_unbonded() -> Weight;
}

/// Weights for pallet_roles using the Substrate node and recommended hardware.
pub struct WebbWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for WebbWeight<T> {
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Roles::Ledger` (r:1 w:1)
	/// Proof: `Roles::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Roles::MinRestakingBond` (r:1 w:0)
	/// Proof: `Roles::MinRestakingBond` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRolesMapping` (r:0 w:1)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_profile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1100`
		//  Estimated: `4565`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4565)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Roles::Ledger` (r:1 w:1)
	/// Proof: `Roles::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Roles::MinRestakingBond` (r:1 w:0)
	/// Proof: `Roles::MinRestakingBond` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRolesMapping` (r:0 w:1)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_profile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1249`
		//  Estimated: `4714`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 4714)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Roles::Ledger` (r:1 w:1)
	/// Proof: `Roles::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Jobs::ValidatorJobIdLookup` (r:1 w:0)
	/// Proof: `Jobs::ValidatorJobIdLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Roles::AccountRolesMapping` (r:0 w:1)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_profile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1071`
		//  Estimated: `4536`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 4536)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Roles::AccountRolesMapping` (r:1 w:0)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CounterForValidators` (r:1 w:1)
	/// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:1 w:1)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::CounterForListNodes` (r:1 w:1)
	/// Proof: `BagsList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1912`
		//  Estimated: `5377`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_000_000, 5377)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Roles::AccountRolesMapping` (r:1 w:0)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinValidatorBond` (r:1 w:0)
	/// Proof: `Staking::MinValidatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:1 w:1)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	fn unbound_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2379`
		//  Estimated: `5844`
		// Minimum execution time: 74_000_000 picoseconds.
		Weight::from_parts(75_000_000, 5844)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Roles::AccountRolesMapping` (r:1 w:0)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_unbonded() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1203`
		//  Estimated: `4764`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 4764)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Roles::Ledger` (r:1 w:1)
	/// Proof: `Roles::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Roles::MinRestakingBond` (r:1 w:0)
	/// Proof: `Roles::MinRestakingBond` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRolesMapping` (r:0 w:1)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_profile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1100`
		//  Estimated: `4565`
		// Minimum execution time: 29_000_000 picoseconds.
		Weight::from_parts(30_000_000, 4565)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Roles::Ledger` (r:1 w:1)
	/// Proof: `Roles::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Roles::MinRestakingBond` (r:1 w:0)
	/// Proof: `Roles::MinRestakingBond` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Roles::AccountRolesMapping` (r:0 w:1)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_profile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1249`
		//  Estimated: `4714`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_000_000, 4714)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Roles::Ledger` (r:1 w:1)
	/// Proof: `Roles::Ledger` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Jobs::ValidatorJobIdLookup` (r:1 w:0)
	/// Proof: `Jobs::ValidatorJobIdLookup` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Roles::AccountRolesMapping` (r:0 w:1)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delete_profile() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1071`
		//  Estimated: `4536`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_000_000, 4536)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Roles::AccountRolesMapping` (r:1 w:0)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:0)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1 w:1)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CounterForValidators` (r:1 w:1)
	/// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:1 w:1)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListBags` (r:1 w:1)
	/// Proof: `BagsList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::CounterForListNodes` (r:1 w:1)
	/// Proof: `BagsList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	fn chill() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1912`
		//  Estimated: `5377`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_000_000, 5377)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Roles::AccountRolesMapping` (r:1 w:0)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Nominators` (r:1 w:0)
	/// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(558), added: 3033, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Validators` (r:1 w:0)
	/// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
	/// Storage: `Staking::MinValidatorBond` (r:1 w:0)
	/// Proof: `Staking::MinValidatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `BagsList::ListNodes` (r:1 w:1)
	/// Proof: `BagsList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
	/// Storage: `Staking::Bonded` (r:1 w:0)
	/// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	fn unbound_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2379`
		//  Estimated: `5844`
		// Minimum execution time: 74_000_000 picoseconds.
		Weight::from_parts(75_000_000, 5844)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: `Roles::AccountRolesMapping` (r:1 w:0)
	/// Proof: `Roles::AccountRolesMapping` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Staking::Ledger` (r:1 w:1)
	/// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(1075), added: 3550, mode: `MaxEncodedLen`)
	/// Storage: `Staking::CurrentEra` (r:1 w:0)
	/// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	fn withdraw_unbonded() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1203`
		//  Estimated: `4764`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(39_000_000, 4764)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}