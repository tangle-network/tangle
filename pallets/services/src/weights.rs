
//! Autogenerated weights for `pallet_services`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-05-21, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Salmans-Laptop.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("benchmark")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/tangle
// benchmark
// pallet
// --chain
// benchmark
// --pallet
// pallet_services
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// ./pallets/services/src/weights.rs
// --template
// ./.maintain/frame-weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_services`.
pub trait WeightInfo {
	fn create_blueprint() -> Weight;
	fn register() -> Weight;
	fn unregister() -> Weight;
	fn update_approval_preference() -> Weight;
	fn request() -> Weight;
	fn approve() -> Weight;
	fn reject() -> Weight;
	fn terminate() -> Weight;
	fn call() -> Weight;
	fn submit_result() -> Weight;
}

/// Weights for `pallet_services` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Services::NextBlueprintId` (r:1 w:1)
	/// Proof: `Services::NextBlueprintId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:0 w:1)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_blueprint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 1594)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1070`
		//  Estimated: `7010`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 7010)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3824`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3824)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_approval_preference() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `334`
		//  Estimated: `3799`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3799)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:3 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextInstanceId` (r:1 w:1)
	/// Proof: `Services::NextInstanceId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:0 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1625`
		//  Estimated: `10040`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(68_000_000, 10040)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `459`
		//  Estimated: `3924`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3924)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reject() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `459`
		//  Estimated: `3924`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3924)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `704`
		//  Estimated: `9119`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(27_000_000, 9119)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextJobCallId` (r:1 w:1)
	/// Proof: `Services::NextJobCallId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobCalls` (r:0 w:1)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1482`
		//  Estimated: `7422`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(45_000_000, 7422)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::JobCalls` (r:1 w:0)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobResults` (r:0 w:1)
	/// Proof: `Services::JobResults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1667`
		//  Estimated: `7607`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(60_000_000, 7607)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Services::NextBlueprintId` (r:1 w:1)
	/// Proof: `Services::NextBlueprintId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:0 w:1)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_blueprint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 1594)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1070`
		//  Estimated: `7010`
		// Minimum execution time: 40_000_000 picoseconds.
		Weight::from_parts(41_000_000, 7010)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `359`
		//  Estimated: `3824`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 3824)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_approval_preference() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `334`
		//  Estimated: `3799`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_000_000, 3799)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:3 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextInstanceId` (r:1 w:1)
	/// Proof: `Services::NextInstanceId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:0 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1625`
		//  Estimated: `10040`
		// Minimum execution time: 65_000_000 picoseconds.
		Weight::from_parts(68_000_000, 10040)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `459`
		//  Estimated: `3924`
		// Minimum execution time: 10_000_000 picoseconds.
		Weight::from_parts(11_000_000, 3924)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reject() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `459`
		//  Estimated: `3924`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 3924)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `704`
		//  Estimated: `9119`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(27_000_000, 9119)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextJobCallId` (r:1 w:1)
	/// Proof: `Services::NextJobCallId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobCalls` (r:0 w:1)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1482`
		//  Estimated: `7422`
		// Minimum execution time: 43_000_000 picoseconds.
		Weight::from_parts(45_000_000, 7422)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::JobCalls` (r:1 w:0)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobResults` (r:0 w:1)
	/// Proof: `Services::JobResults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1667`
		//  Estimated: `7607`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(60_000_000, 7607)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
