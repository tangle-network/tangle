
//! Autogenerated weights for `pallet_services`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-10-02, STEPS: `50`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `workstation`, CPU: `AMD Ryzen 9 5950X 16-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("benchmark")`, DB CACHE: `1024`

// Executed Command:
// target/release/tangle
// benchmark
// pallet
// --chain
// benchmark
// --pallet
// pallet_services
// --extrinsic
// *
// --steps
// 50
// --repeat
// 50
// --output
// ./pallets/services/src/weights.rs
// --template
// ./.maintain/frame-weights-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_services`.
pub trait WeightInfo {
	fn create_blueprint() -> Weight;
	fn pre_register() -> Weight;
	fn register() -> Weight;
	fn unregister() -> Weight;
	fn update_approval_preference() -> Weight;
	fn update_price_targets() -> Weight;
	fn request() -> Weight;
	fn approve() -> Weight;
	fn reject() -> Weight;
	fn terminate() -> Weight;
	fn call() -> Weight;
	fn submit_result() -> Weight;
}

/// Weights for `pallet_services` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Services::NextBlueprintId` (r:1 w:1)
	/// Proof: `Services::NextBlueprintId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:0 w:1)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_blueprint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1561`
		// Minimum execution time: 13_050_000 picoseconds.
		Weight::from_parts(13_600_000, 1561)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	fn pre_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_450_000 picoseconds.
		Weight::from_parts(5_670_000, 0)
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `6509`
		// Minimum execution time: 43_811_000 picoseconds.
		Weight::from_parts(44_740_000, 6509)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `326`
		//  Estimated: `3791`
		// Minimum execution time: 18_170_000 picoseconds.
		Weight::from_parts(18_840_000, 3791)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_approval_preference() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3807`
		// Minimum execution time: 14_440_000 picoseconds.
		Weight::from_parts(14_970_000, 3807)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_price_targets() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3807`
		// Minimum execution time: 14_340_000 picoseconds.
		Weight::from_parts(14_730_000, 3807)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:3 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextInstanceId` (r:1 w:1)
	/// Proof: `Services::NextInstanceId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:0 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1291`
		//  Estimated: `9706`
		// Minimum execution time: 67_331_000 picoseconds.
		Weight::from_parts(68_461_000, 9706)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `3891`
		// Minimum execution time: 13_720_000 picoseconds.
		Weight::from_parts(14_170_000, 3891)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reject() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `3891`
		// Minimum execution time: 12_250_000 picoseconds.
		Weight::from_parts(12_700_000, 3891)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `9086`
		// Minimum execution time: 29_731_000 picoseconds.
		Weight::from_parts(30_280_000, 9086)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextJobCallId` (r:1 w:1)
	/// Proof: `Services::NextJobCallId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobCalls` (r:0 w:1)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1025`
		//  Estimated: `6965`
		// Minimum execution time: 47_541_000 picoseconds.
		Weight::from_parts(48_270_000, 6965)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::JobCalls` (r:1 w:0)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobResults` (r:0 w:1)
	/// Proof: `Services::JobResults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1276`
		//  Estimated: `7216`
		// Minimum execution time: 56_951_000 picoseconds.
		Weight::from_parts(58_030_000, 7216)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Services::NextBlueprintId` (r:1 w:1)
	/// Proof: `Services::NextBlueprintId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:0 w:1)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn create_blueprint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `76`
		//  Estimated: `1561`
		// Minimum execution time: 13_050_000 picoseconds.
		Weight::from_parts(13_600_000, 1561)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	fn pre_register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_450_000 picoseconds.
		Weight::from_parts(5_670_000, 0)
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `6509`
		// Minimum execution time: 43_811_000 picoseconds.
		Weight::from_parts(44_740_000, 6509)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:1 w:1)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn unregister() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `326`
		//  Estimated: `3791`
		// Minimum execution time: 18_170_000 picoseconds.
		Weight::from_parts(18_840_000, 3791)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_approval_preference() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3807`
		// Minimum execution time: 14_440_000 picoseconds.
		Weight::from_parts(14_970_000, 3807)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:1)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_price_targets() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `342`
		//  Estimated: `3807`
		// Minimum execution time: 14_340_000 picoseconds.
		Weight::from_parts(14_730_000, 3807)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:3 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextInstanceId` (r:1 w:1)
	/// Proof: `Services::NextInstanceId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:0 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn request() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1291`
		//  Estimated: `9706`
		// Minimum execution time: 67_331_000 picoseconds.
		Weight::from_parts(68_461_000, 9706)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `3891`
		// Minimum execution time: 13_720_000 picoseconds.
		Weight::from_parts(14_170_000, 3891)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::ServiceRequests` (r:1 w:1)
	/// Proof: `Services::ServiceRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reject() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `426`
		//  Estimated: `3891`
		// Minimum execution time: 12_250_000 picoseconds.
		Weight::from_parts(12_700_000, 3891)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:1)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::UserServices` (r:1 w:1)
	/// Proof: `Services::UserServices` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::OperatorsProfile` (r:3 w:3)
	/// Proof: `Services::OperatorsProfile` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn terminate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `671`
		//  Estimated: `9086`
		// Minimum execution time: 29_731_000 picoseconds.
		Weight::from_parts(30_280_000, 9086)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::NextJobCallId` (r:1 w:1)
	/// Proof: `Services::NextJobCallId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobCalls` (r:0 w:1)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1025`
		//  Estimated: `6965`
		// Minimum execution time: 47_541_000 picoseconds.
		Weight::from_parts(48_270_000, 6965)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Services::JobCalls` (r:1 w:0)
	/// Proof: `Services::JobCalls` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Instances` (r:1 w:0)
	/// Proof: `Services::Instances` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Blueprints` (r:1 w:0)
	/// Proof: `Services::Blueprints` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Services::Operators` (r:1 w:0)
	/// Proof: `Services::Operators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `BaseFee::BaseFeePerGas` (r:1 w:0)
	/// Proof: `BaseFee::BaseFeePerGas` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `EVM::AccountCodes` (r:2 w:0)
	/// Proof: `EVM::AccountCodes` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Digest` (r:1 w:0)
	/// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Services::JobResults` (r:0 w:1)
	/// Proof: `Services::JobResults` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn submit_result() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1276`
		//  Estimated: `7216`
		// Minimum execution time: 56_951_000 picoseconds.
		Weight::from_parts(58_030_000, 7216)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
