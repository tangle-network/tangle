// This file is part of Tangle.
// Copyright (C) 2022-2024 Tangle Foundation.
//
// Tangle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tangle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tangle.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for credits pallet
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0
//! DATE: 2025-05-07, STEPS: `10`, REPEAT: `2`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/tangle
// benchmark
// --chain=dev
// --steps=10
// --repeat=2
// --pallet=credits
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for credits pallet.
pub trait WeightInfo {
	/// Weight for the `burn` extrinsic
	fn burn() -> Weight;
        /// Weight for the `claim_credits` extrinsic
        fn claim_credits() -> Weight;
        /// Weight for the `set_stake_tiers` extrinsic
        fn set_stake_tiers() -> Weight;
}

/// Weights for credits pallet using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Credits::StakeTiers` (r:1 w:0)
	/// Proof: `Credits::StakeTiers` (`max_values`: None, `max_size`: Some(256), mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), mode: `Measured`)
	/// Storage: `Credits::CreditsGrantedFromBurn` (r:1 w:1)
	/// Proof: `Credits::CreditsGrantedFromBurn` (`max_values`: None, `max_size`: Some(128), mode: `Measured`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `512`
		//  Estimated: `1024`
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_parts(26_000_000, 1024)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	/// Storage: `Credits::StakeTiers` (r:1 w:0)
	/// Proof: `Credits::StakeTiers` (`max_values`: None, `max_size`: Some(256), mode: `Measured`)
	/// Storage: `Credits::LastRewardUpdateBlock` (r:1 w:1)
	/// Proof: `Credits::LastRewardUpdateBlock` (`max_values`: None, `max_size`: Some(128), mode: `Measured`)
	/// Storage: `Credits::CreditsClaimed` (r:1 w:0)
	/// Proof: `Credits::CreditsClaimed` (`max_values`: None, `max_size`: Some(128), mode: `Measured`)
	/// Storage: `Credits::ClaimedCredits` (r:1 w:1)
	/// Proof: `Credits::ClaimedCredits` (`max_values`: None, `max_size`: Some(128), mode: `Measured`)
        fn claim_credits() -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `640`
                //  Estimated: `1280`
                // Minimum execution time: 35_000 nanoseconds.
                Weight::from_parts(36_000_000, 1280)
                        .saturating_add(T::DbWeight::get().reads(4_u64))
                        .saturating_add(T::DbWeight::get().writes(2_u64))
        }

        /// Storage: `Credits::StakeTiers` (r:0 w:1)
        /// Proof: `Credits::StakeTiers` (`max_values`: None, `max_size`: Some(256), mode: `Measured`)
        fn set_stake_tiers() -> Weight {
                // Proof Size summary in bytes:
                //  Measured:  `0`
                //  Estimated: `0`
                // Minimum execution time: 5_000_000 picoseconds.
                Weight::from_parts(5_000_000, 0)
                        .saturating_add(T::DbWeight::get().writes(1_u64))
        }
}

// For backwards compatibility and tests
impl WeightInfo for () {
        fn burn() -> Weight {
                Weight::from_parts(26_000_000, 0)
                        .saturating_add(RocksDbWeight::get().reads(3_u64))
                        .saturating_add(RocksDbWeight::get().writes(2_u64))
        }

        fn claim_credits() -> Weight {
                Weight::from_parts(36_000_000, 0)
                        .saturating_add(RocksDbWeight::get().reads(4_u64))
                        .saturating_add(RocksDbWeight::get().writes(2_u64))
        }

        fn set_stake_tiers() -> Weight {
                Weight::from_parts(5_000_000, 0)
                        .saturating_add(RocksDbWeight::get().writes(1_u64))
        }
}