// This file is part of Tangle.
// Copyright (C) 2022-2024 Tangle Foundation.
//
// Tangle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tangle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Tangle.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for multi_asset_delegation
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0
//! DATE: 2025-02-18, STEPS: `[50, ]`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/tangle
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=multi_asset_delegation
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for multi_asset_delegation.
pub trait WeightInfo {
	fn join_operators() -> Weight;
	fn schedule_leave_operators() -> Weight;
	fn cancel_leave_operators() -> Weight;
	fn execute_leave_operators() -> Weight;
	fn operator_bond_more() -> Weight;
	fn schedule_operator_unstake() -> Weight;
	fn execute_operator_unstake() -> Weight;
	fn cancel_operator_unstake() -> Weight;
	fn go_offline() -> Weight;
	fn go_online() -> Weight;
	fn deposit() -> Weight;
	fn schedule_withdraw() -> Weight;
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn join_operators() -> Weight {
		Weight::from_parts(42_123_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

	fn schedule_leave_operators() -> Weight {
		Weight::from_parts(38_456_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn cancel_leave_operators() -> Weight {
		Weight::from_parts(35_789_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn execute_leave_operators() -> Weight {
		Weight::from_parts(45_234_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

	fn operator_bond_more() -> Weight {
		Weight::from_parts(39_876_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn schedule_operator_unstake() -> Weight {
		Weight::from_parts(41_567_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn execute_operator_unstake() -> Weight {
		Weight::from_parts(44_789_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

	fn cancel_operator_unstake() -> Weight {
		Weight::from_parts(36_234_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn go_offline() -> Weight {
		Weight::from_parts(33_456_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn go_online() -> Weight {
		Weight::from_parts(34_123_000, 0)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn deposit() -> Weight {
		Weight::from_parts(48_567_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

	fn schedule_withdraw() -> Weight {
		Weight::from_parts(43_234_000, 0)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}